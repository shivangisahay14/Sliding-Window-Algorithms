BRUTE FORCE:
vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        int n=nums.size();
         int j, max; 
        vector<int>ans;

    for (int i = 0; i <= n - k; i++) 
    { 
        max = nums[i]; 

        for (j = 1; j < k; j++) 
        { 
            if (nums[i + j] > max) 
                max = nums[i + j]; 
        } 
        ans.push_back(max); 
    }
    return ans;       
        
        
    }
    
    Sliding Window approach:
     deque<int> dq(k);
        int n = nums.size();
        int i=0;
        
        // process first k elements
        for(i=0; i<k; i++)
        {
            // For every element, the previous smaller elements are useless so 
		// remove them from Qi 
            while(!dq.empty() && nums[i]>nums[dq.back()])
            {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        
        vector<int> ans;
        
        // process remaining elements
        for(; i<n; i++)
        {
            // The element at the front of the queue is the largest element of 
		// previous window, so print it
            ans.push_back(nums[dq.front()]);
            
            // remove elements which are not part of window/// Remove the elements which are out of this window 
            while(!dq.empty() && dq.front() <= i-k)
            {
                dq.pop_front();
            }
            
            // remove elements which are not useful/ // Remove all elements smaller than the currently 
		// being added element
            while(!dq.empty() && nums[i]>nums[dq.back()])
            {
                dq.pop_back();
            }
            
            // add new element
            dq.push_back(i);
            
        }
        
        ans.push_back(nums[dq.front()]);
        
        return ans;
        
