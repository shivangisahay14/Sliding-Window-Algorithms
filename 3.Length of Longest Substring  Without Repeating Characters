Algo:
 int lengthOfLongestSubstring(string s) {
        map<char,int>mp;
        int mx=0;
        int i=0,j=0;
        int n=s.length();
        while(j<n)
        {
            mp[s[j]]++;  // Updating character in map
            if(mp.size()==j-i+1)   // Here j-i+1 == window size
            {
                mx=max(mx,j-i+1);
            }
            else       //we will also have to check for the window right after updating the map in the else case.
            {
                while(mp.size()<j-i+1)
                {
                    mp[s[i]]--;
                    if(mp[s[i]]==0)
                    {
                        mp.erase(s[i]);
                    }
                    i++; // Increasing the left side
                    j-i+1-1; // Shrinking window size
                    if(mp.size()==j-i+1)
                    {
                        mx=max(mx,j-i+1);  // Updating the window size
                    }
                }
            
            }
            j++;
        }
        return mx;
    }
        
        Method 1 (Simple : O(n3)): We can consider all substrings one by one and check for each substring whether it contains all unique characters or not. 
        There will be n*(n+1)/2 substrings. Whether a substring contains all unique characters or not can be checked in linear time by scanning it from left to right and keeping a map of visited characters. 
        Time complexity of this solution would be O(n^3)
        bool areDistinct(string str, int i, int j)
{

    // Note : Default values in visited are false
    vector<bool> visited(26);

    for (int k = i; k <= j; k++) {
        if (visited[str[k] - 'a'] == true)
            return false;
        visited[str[k] - 'a'] = true;
    }
    return true;
}

// Returns length of the longest substring
// with all distinct characters.
int longestUniqueSubsttr(string str)
{
    int n = str.size();
    int res = 0; // result
    for (int i = 0; i < n; i++)
        for (int j = i; j < n; j++)
            if (areDistinct(str, i, j))
                res = max(res, j - i + 1);
    return res;
}

Method 2 (Better : O(n2)) The idea is to use window sliding. 
Whenever we see repitition, we remove the pervious occurrance and slide the window.
int longestUniqueSubsttr(string str)
{
    int n = str.size();
    int res = 0; // result

    for (int i = 0; i < n; i++) {
        
        // Note : Default values in visited are false
        vector<bool> visited(256);   

        for (int j = i; j < n; j++) {

            // If current character is visited
            // Break the loop
            if (visited[str[j]] == true)
                break;

            // Else update the result if
            // this window is larger, and mark
            // current character as visited.
            else {
                res = max(res, j - i + 1);
                visited[str[j]] = true;
            }
        }

        // Remove the first character of previous
        // window
        visited[str[i]] = false;
    }
    return res;
}
Method 3 (Linear Time): Let us talk about the linear time solution now. 
This solution uses extra space to store the last indexes of already visited characters. 
The idea is to scan the string from left to right, keep track of the maximum length Non-Repeating Character Substring seen so far in res.
When we traverse the string, to know the length of current window we need two indexes.

{
    int n = str.size();

    int res = 0; // result

    // last index of all characters is initialized
    // as -1
    vector<int> lastIndex(NO_OF_CHARS, -1);

    // Initialize start of current window
    int i = 0;

    // Move end of current window
    for (int j = 0; j < n; j++) {

        // Find the last index of str[j]
        // Update i (starting index of current window)
        // as maximum of current value of i and last
        // index plus 1
        i = max(i, lastIndex[str[j]] + 1);

        // Update result if we get a larger window
        res = max(res, j - i + 1);

        // Update last index of j.
        lastIndex[str[j]] = j;
    }
    return res;
}
Method 3 (Linear Time): Let us talk about the linear time solution now. This solution uses extra space to store the last indexes of already visited characters. The idea is to scan the string from left to right, keep track of the maximum length Non-Repeating Character Substring seen so far in res. When we traverse the string, to know the length of current window we need two indexes. 
