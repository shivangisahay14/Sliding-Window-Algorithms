Method 1 (Brute Force) 
If the length of string is n, then there can be n*(n+1)/2 possible substrings. 
A simple way is to generate all the substring and check each one whether it has exactly k unique characters or not. 
If we apply this brute force, it would take O(n2) to generate all substrings and O(n) to do a check on each one. Thus overall it would go O(n3).
We can further improve this solution by creating a hash table and while generating the substrings, check the number of unique characters using that hash table. 
Thus it would improve up to O(n2)


Sliding window approach:
 int longestKSubstr(string s, int k) {
        
        unordered_map<char,int>mp;
        int n=s.size();
        int i=-1,j=-1;
        int maxlen=INT_MIN;
        while(j<n){
            
            mp[s[j]-'a']++;
            
            if(mp.size()<k){
                j++;
            }
            if(mp.size()==k){
                maxlen=max(maxlen,j-i+1);
            }
            else{
                while(mp.size()>k){
                    mp[s[i]-'a']--;
                    i++;
                    if(mp.size()==0){
                mp.erase(s[j]-'a');
            }
                }
                j++;
            }
        }   */
        return maxlen;
    // your code here
    }
    
    int longestKSubstr(string s, int k) {
        int n=s.size();
        // stores the longest substring boundaries
    int end = 0, begin = 0;
 
    // set to store distinct characters in a window
    unordered_set<char> window;
 
    // Count array `freq` stores the frequency of characters present in the
    // current window. We can also use a map instead of a count array.
    int freq[26] = { 0 };
 
    // `[low…high]` maintains the sliding window boundaries
    for (int low = 0, high = 0; high < n; high++)
    {
        window.insert(str[high]);
        freq[s[high]]++;
 
        // if the window size is more than `k`, remove characters from the left
        while (window.size() > k)
        {
            // If the leftmost character's frequency becomes 0 after
            // removing it in the window, remove it from the set as well
            if (--freq[s[low]] == 0) {
                window.erase(s[low]);
            }
 
            low++;        // reduce window size
        }
 
        // update the maximum window size if necessary
        if (end - begin < high - low)
        {
            end = high;
            begin = low;
        }
    }
 
    // return the longest substring found at `str[begin…end]`
    string ans=s.substr(begin, end - begin + 1);
    return ans.size();
        

    }
